import numpy as np

# ==============================================================================
# H√ÄM M√î PH·ªéNG S·ªê NGUY√äN C·ª¶A B·∫†N (ƒê√É CUNG C·∫§P)
# ==============================================================================

def h_swish_integer_simulation(x_float, ifm_m_bits, weight_m_bits):
    """
    M√¥ ph·ªèng h√†m h-swish v·ªõi logic t√≠nh to√°n (th·ª© t·ª±, l√†m tr√≤n, d·ªãch bit)
    gi·ªëng h·ªát v·ªõi m√¥ t·∫£ ph·∫ßn c·ª©ng.

    H√†m n√†y gi·ªØ nguy√™n c√°c tham s·ªë ƒë·∫ßu v√†o v√† ki·ªÉu tr·∫£ v·ªÅ c·ªßa h√†m g·ªëc.
    """
    # =============================================================
    # 1. THI·∫æT L·∫¨P C√ÅC THAM S·ªê V√Ä H·∫∞NG S·ªê
    # =============================================================

    # X√°c ƒë·ªãnh s·ªë bit ph·∫ßn l·∫ª (fractional bits) cho ph√©p to√°n ch√≠nh.
    # Logic n√†y ƒë∆∞·ª£c l·∫•y t·ª´ h√†m g·ªëc c·ªßa b·∫°n ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh t∆∞∆°ng th√≠ch.
    FRAC_BITS = ifm_m_bits + weight_m_bits
    SCALE = np.int64(1) << FRAC_BITS

    # C√°c h·∫±ng s·ªë cho gi√° tr·ªã 3 v√† 6, ƒë∆∞·ª£c scale theo FRAC_BITS
    C3_Q = np.int64(3) * SCALE
    REL6_Q = np.int64(6) * SCALE

    # H·∫±ng s·ªë cho 1/6. ƒê√¢y l√† h·∫±ng s·ªë t·ª´ thi·∫øt k·∫ø ph·∫ßn c·ª©ng v√† kh√¥ng thay ƒë·ªïi.
    # Gi√° tr·ªã 1/6 ƒë∆∞·ª£c x·∫•p x·ªâ l√† 11/64 (ƒë·ªãnh d·∫°ng Q0.6).
    INV6_Q = np.int64(11)
    INV6_FRAC_BITS = 6
    # L∆∞·ª£ng b√π ƒë·ªÉ l√†m tr√≤n cho ph√©p nh√¢n v·ªõi INV6 (lu√¥n l√† 32 v√¨ d·ªãch 6 bit)
    ROUND_BIAS_INV6 = np.int64(1) << (INV6_FRAC_BITS - 1)

    # L∆∞·ª£ng b√π ƒë·ªÉ l√†m tr√≤n cho ph√©p nh√¢n ch√≠nh (ph·ª• thu·ªôc v√†o FRAC_BITS)
    if FRAC_BITS > 0:
        ROUND_BIAS_PROD = np.int64(1) << (FRAC_BITS - 1)
    else:
        ROUND_BIAS_PROD = np.int64(0)

    # =============================================================
    # 2. B·∫ÆT ƒê·∫¶U T√çNH TO√ÅN
    # =============================================================

    # L∆∞·ª£ng t·ª≠ h√≥a ƒë·∫ßu v√†o float sang s·ªë nguy√™n theo SCALE ƒë√£ t√≠nh
    x_q = np.round(x_float * SCALE).astype(np.int64)

    # T√≠nh ReLU6(x + 3) trong kh√¥ng gian s·ªë nguy√™n
    relu6_q = np.clip(x_q + C3_Q, 0, REL6_Q)

    # T√≠nh to√°n theo ƒë√∫ng th·ª© t·ª± v√† logic d·ªãch bit c·ªßa ph·∫ßn c·ª©ng
    # B∆∞·ªõc 1: T√≠nh (x * 1/6)
    # Ph√©p nh√¢n: Q.(FRAC_BITS) * Q.(6) -> Q.(FRAC_BITS + 6)
    prod1_intermediate = x_q * INV6_Q
    print(prod1_intermediate)
    # L√†m tr√≤n v√† d·ªãch ph·∫£i 6 bit ƒë·ªÉ quay v·ªÅ Q.(FRAC_BITS)
    tmp_q = (prod1_intermediate + ROUND_BIAS_INV6) >> INV6_FRAC_BITS
    print(tmp_q)
    # B∆∞·ªõc 2: T√≠nh (k·∫øt qu·∫£ tr√™n) * ReLU6(x+3)
    # Ph√©p nh√¢n: Q.(FRAC_BITS) * Q.(FRAC_BITS) -> Q.(2*FRAC_BITS)
    prod2_intermediate = tmp_q * relu6_q
    print(prod2_intermediate)
    # L√†m tr√≤n v√† d·ªãch ph·∫£i FRAC_BITS bit ƒë·ªÉ quay v·ªÅ Q.(FRAC_BITS)
    y_mid_q = (prod2_intermediate + ROUND_BIAS_PROD) >> FRAC_BITS
    print(y_mid_q)
    # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát (t∆∞∆°ng ƒë∆∞∆°ng tf.where)
    is_zero = (relu6_q == 0)
    is_sat = (relu6_q == REL6_Q) # B√£o h√≤a t·∫°i gi√° tr·ªã 6
    y_q = np.where(is_sat, x_q, y_mid_q)
    y_q = np.where(is_zero, 0, y_q)

    # =============================================================
    # 3. TR·∫¢ V·ªÄ K·∫æT QU·∫¢
    # =============================================================
    print(y_q)
    # Phi l∆∞·ª£ng t·ª≠ h√≥a k·∫øt qu·∫£ cu·ªëi c√πng v·ªÅ l·∫°i float
    final_float = y_q / float(SCALE)

    return final_float


# ==============================================================================
# H√ÄM THAM CHI·∫æU (CHU·∫®N) S·ª¨ D·ª§NG PH√âP TO√ÅN FLOAT
# ==============================================================================

def h_swish_float_reference(x):
    """H√†m h-swish ti√™u chu·∫©n s·ª≠ d·ª•ng to√†n b·ªô ph√©p to√°n float."""
    # C√¥ng th·ª©c: x * ReLU6(x + 3) / 6
    return x * np.maximum(0, np.minimum(6, x + 3)) / 6.0


# ==============================================================================
# KH·ªêI M√É KI·ªÇM TH·ª¨ (TESTBENCH)
# ==============================================================================

if __name__ == "__main__":
    # C√°c gi√° tr·ªã ƒë·∫ßu v√†o ƒë·ªÉ ki·ªÉm tra
    # Bao g·ªìm c√°c tr∆∞·ªùng h·ª£p: x < -3, x = -3, -3 < x < 3, x = 3, x > 3
    x_test_values = np.array([
        -0.01458740234375000000
    ], dtype=np.float64)

    # C√°c k·ªãch b·∫£n v·ªÅ ƒë·ªô ch√≠nh x√°c (s·ªë bit ph·∫ßn th·∫≠p ph√¢n) ƒë·ªÉ ki·ªÉm tra
    # V√≠ d·ª•: (ifm_m_bits, weight_m_bits)
    test_precisions = [(7, 7), (8, 8)]

    for ifm_bits, weight_bits in test_precisions:
        total_frac_bits = ifm_bits + weight_bits
        print("=" * 80)
        print(f"üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra v·ªõi ifm_m_bits = {ifm_bits}, weight_m_bits = {weight_bits} (T·ªïng FRAC_BITS = {total_frac_bits})")
        print("=" * 80)

        # 1. T√≠nh to√°n gi√° tr·ªã tham chi·∫øu (chu·∫©n)
        ref_results = h_swish_float_reference(x_test_values)

        # 2. T√≠nh to√°n gi√° tr·ªã t·ª´ h√†m m√¥ ph·ªèng s·ªë nguy√™n c·ªßa b·∫°n
        sim_results = h_swish_integer_simulation(x_test_values, ifm_bits, weight_bits)

        # 3. T√≠nh to√°n sai s·ªë tuy·ªát ƒë·ªëi
        error = np.abs(ref_results - sim_results)

        # 4. In k·∫øt qu·∫£ ra b·∫£ng ƒë·ªÉ d·ªÖ so s√°nh
        print(f"{'ƒê·∫ßu v√†o (x)':>15} | {'Chu·∫©n (Float)':>15} | {'M√¥ ph·ªèng (Int)':>15} | {'Sai s·ªë':>15}")
        print(f"{'-'*15:->}-+-{'-'*15:->}-+-{'-'*15:->}-+-{'-'*15:->}")

        for i in range(len(x_test_values)):
            print(f"{x_test_values[i]:>15.4f} | {ref_results[i]:>15.8f} | {sim_results[i]:>15.8f} | {error[i]:>15.8f}")

        print("\n" * 2)